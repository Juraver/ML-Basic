# Задание 1: Получение однозначного числа
# Пользователь вводит целое число, программа складывает все цифры числа,
# с полученным числом — то же самое, и так до тех пор, пока не получится
# однозначное число.
#
#
# Примеры:
#
# 545   -> 5
# 12345 -> 6

# a = int(input('Ведите целое положительное число: '))
# while a >= 10:
#     sum = 0
#     for item in str(a):
#         sum += int(item)
#     a = sum
# print('Однозначное число = ', a )

# Задание 2: Кинотеатр
# Дан список списков, каждый вложенный список состоит из 1 и 0,
# количество вложенных списков — количество рядов. Пользователь вводит,
# сколько билетов ему требуется. Программа должна найти ряд, где можно
# приобрести нужное количество билетов (места должны быть рядом).
# Если таких рядов несколько, то ближайший к экрану
# (ближайшим считается нулевой ряд). Если таких мест нет, то вывести False.
#
# Примеры:
#
# [[0,1,1,0], [1,0,0,0], [0,1,0,0]], 2 -> 1
# [[0,1,1,0], [1,0,1,0], [1,1,0,1]], 2 -> False

# def find_seats(seating_chart, num_tickets):
#     for row_index, row in enumerate(seating_chart):
#         for i in range(len(row) - num_tickets + 1):
#             if all(row[i + j] == 0 for j in range(num_tickets)):
#                 return row_index
#     return False
#
# num_tickets = int(input('Введите нужное количество билетов и чтобы рядом = '))
#
# seating_chart = [[0, 1, 1, 1],
#                  [1, 1, 0, 1],
#                  [0, 0, 0, 1],
#                  [0, 1, 0, 0]]
# result = find_seats(seating_chart, num_tickets)
# if result is not False:
#     print(f"Найден ряд {result} для {num_tickets} билетов.")
# else:
#     print(f"Не удалось найти {num_tickets} билетов рядом.")

# Задание 3: Алгоритм RLE
# Необходимо написать упрощенную версию алгоритма RLE. Алгоритм RLE объединяет подряд идущие символы в коэффициент и символ.
#
#
# Примеры:
#
# asssdddsssddd -> 1a3s3d3s3d
# aaabbbbccccc  -> 3a4b5c
# abcba         -> 1a1b1c1b1a

# def rle(data):
#
#     if not data:
#         return ''
#
#     encoded_data = []
#
#     count = 1
#     for i in range(len(data)):
#         if len(data) > i + 1 and data[i] == data[i + 1]:
#             count += 1
#         else:
#             encoded_data.append((count, data[i]))
#             count = 1
#
#     return encoded_data
#
# rle_enter = input('Введите строку символов на английском в нижнем регистре: ')
#
# lst_tuple = rle(rle_enter)
#
# rle_string = ''.join(str(item) for tuple_ in lst_tuple for item in tuple_)
#
# print('Кодировка RLE: ', rle_string)

# Задание 4: Шифр Цезаря
# Реализуйте программу для шифрования текста с помощью шифра Цезаря.
# Шифр Цезаря — это метод шифрования, при котором каждая буква в тексте заменяется буквой,
# стоящей на фиксированное число позиций дальше в алфавите.
#
# Требования
# Программа должна принимать на вход:
#
# Строку текста для шифрования
# Ключ шифра (число от 0 до 25)
# Правила шифрования:
#
# Шифруются только латинские буквы (a-z, A-Z)
# Сохраняется регистр букв (заглавные остаются заглавными)
# Пробелы, цифры и знаки препинания остаются без изменений
# Сдвиг циклический (после 'z' идет 'a', после 'Z' идет 'A')
# Примеры
# "Hello World", 3      -> "Khoor Zruog"
# "Python is great!", 5 -> "Udymts nx lwjfy!"
# "XYZ abc", 3          -> "ABC def"
# "Test 123", 1         -> "Uftu 123"
# Алгоритм
# Для каждого символа в строке:
# Если это латинская буква, найти её позицию в алфавите
# Добавить к позиции значение ключа
# Если результат больше 25, использовать остаток от деления на 26
# Преобразовать обратно в букву, сохранив регистр
# Если это не буква, оставить символ без изменений

# def caesar(text, shift):
#     result = ''
#     for char in text:
#         if 'a' <= char <= 'z':
#             start = ord('a')
#             shifted_char = chr((ord(char) - start + shift) % 26 + start)
#         elif 'A' <= char <= 'Z':
#             start = ord('A')
#             shifted_char = chr((ord(char) - start + shift) % 26 + start)
#         else:
#             shifted_char = char
#         result += shifted_char
#     return result
#
# text_enter = input('Введите текст на английском: ')
# shift_enter = int(input('Введите число шифрования: '))
#
# text_exit = caesar(text_enter, shift_enter)
# print(f'Зашифрованный текст: {text_exit} ')

# Задание 5: Табель успеваемости
# Пользователь в бесконечном цикле (пока не будет введена пустая строка) вводит строки вида:
# 'название предмета' 'фамилия ученика' 'оценка'. После окончания ввода программа выводит в консоль
# название предмета, далее список учеников и все их оценки в виде таблицы.
#
#
# Примеры:
#
#
# Ввод:
#
# Математика Иванов  5
# Математика Иванов  4
# Литература Иванов  3
# Математика Петров  5
# Литература Сидоров 3
# Литература Петров  5
# Литература Иванов  4
# Математика Сидоров 3
# Математика Петров  5
#
# Результат:
#
# Математика # вводим название предмета
#
# # выводим список учеников и их оценки
# Иванов  5 4
# Петров  5 5
# Сидоров 3
# Литература # вводим название предмета
#
# # выводим список учеников и их оценки
# Иванов  3 4
# Сидоров 3
# Петров  5

# shcool = []
# tpl = ()

def create_student_grades():
    grades = {}
    while True:
        name = input("Введите Фамилию студента (или 'Enter' для завершения): ")
        if name.lower() == '':
            break
        grades[name] = {}
        while True:
            subject = input(f"Введите название предмета для {name} (или 'Enter' для завершения): ")
            g = []
            if subject.lower() == '':
                break
            while True:

                grade = (input(f"Введите оценку по {subject} для {name} (или 'Enter' для завершения): "))
                if grade.lower() == '':
                    break
                g.append(grade)
                grades[name][subject] = g

    return grades


a = create_student_grades()
print(a)

subject1 = input(f"Введите название предмета: ")

for student, subjects in a.items():

    for subject, g in subjects.items():
        if subject == subject1:
            print(f"  {subject}: {student} {', '.join(g)}")

