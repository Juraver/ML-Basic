# Исходные данные:
#
# В проекте мы работаем с медиа-файлами (аудио, видео, фото).
# Есть некоторый общий набор данных о файле, необходимый для реализации бизнес-логики
# (имя, размер, дата создания, владелец...).
# Для каждого типа медиа-файлов есть свой набор метаданных.
#
# Задание:
#
# Попробуйте написать классы для работы с медиа-файлами (они будут основой для пользовательского кода остальных команд).
# Приведите примеры кода, как можно создать, обновить, удалить или провести какое-нибудь действие
# (конвертация, извлечение фич) над файлом (можно без реализации деталей).
# Попробуйте дописать классы для работы с файлами, расположенными не на локальном диске
# (облако, удаленный сервер, s3-like storage).
# Попробуйте ответить на вопросы: много ли кода придется дописать / переписать при добавлении новых типов файлов и способов их хранения?
#
# Суть задания — именно проектирование классовой иерархии, а не реализация самой логики, поэтому достаточно, например,
# просто объявить метод .save(...) и в комментарии уточнить, что он должен делать, без конкретной реализации.

class MediaFile:
    def __init__(self, name, size, dates, types, owner): # свойства: имя файла, размер файла, дата создания, тип файла, владелец файла
        self.name = name
        self.size = size
        self.dates = dates
        self.types = types
        self.owner = owner
    def saveFile(self, pathFile):
        pass   # Метод Сохраняет файл по конкретному пути, например d:\media
    def openFile(self, pathFile):
        pass   # Метод Открывает файл по конретному пути, указанному в pathFile на этом компьютере.

    """
       Для работы с файлами в облаке Python можно использовать различные библиотеки,
       такие как google-cloud-storage для Google Cloud Storage.

    1) Устанавливаем библиотеку pip install google-cloud-storage
    2) Проходим аутентификацию, чтобы получить доступ к облачному хранилищу
    3) Создаём объект, представляющий наше облачное хранилище StorageClient 
    4) После этого проводим операции с файлами
       Загрузка файлов upload_file 
       Скачивание файлов download_file 
       Удаление файлов delete_file  и т.д.

       Если подстраивать наши классы под работу с файлами в облаке или на уд.сервере, то ненамного код увеличится
    """


    def delFile(self):
        pass      # Метод удаляет медиафайл


class ImageFile(MediaFile):
    def __init__(self, widthPaint, heightPaint, name, size, dates, types, owner): # свойства: ширина фото, высота фото
        super().__init__(self, name, size, dates, types, owner)
        self.widthPaint = widthPaint
        self.heightPaint = heightPaint
    def resize(self, percent):
        pass  # Метод Изменяет размер фотограффии в процентах
    def rotate(self, grad):
        pass  # Метод поворачивает фото на определеный градус

class AudioFile(MediaFile):
    def __init__(self, bitrate, sampleRate): # свойства: глубина семплирования, частота семплирования
        self.bitrate = bitrate
        self.sampleRate = sampleRate
    def convertToMP3(self, pathMp3):
        pass  # Метод конвертирует WAV файл в MP3 в определённый каталог
    def normalizeVolume(self, level):
        pass  # Метод нормализует громкость

class VideoFile(MediaFile):
    def __init__(self, form): # свойства: формат видео (AVI, MPEG, MKV)
        self.form = form
    def convertToForms(self, forms):
        pass  # Метод конвертирует из определённого формата в другой формат
    def videoToAudio(self, formatAudio):
        pass   # Метод сохраняет аудиодорожку видеофайла в определённом формате аудио (WAV, MP3)
